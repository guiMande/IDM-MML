/*
 * generated by Xtext 2.19.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package src.idm_mml.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package src.idm_mml.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import src.idm_mml.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "MML";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleMML
entryRuleMML returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMMLRule()); }
	iv_ruleMML=ruleMML
	{ $current=$iv_ruleMML.current; }
	EOF;

// Rule MML
ruleMML returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='MML'
		{
			newLeafNode(otherlv_0, grammarAccess.getMMLAccess().getMMLKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getMMLAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMMLAccess().getMmlImplementationParserRuleCall_2_0());
				}
				lv_mml_2_0=ruleImplementation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMMLRule());
					}
					add(
						$current,
						"mml",
						lv_mml_2_0,
						"src.idm_mml.MyDsl.Implementation");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			(
				{
					newCompositeNode(grammarAccess.getMMLAccess().getMmlDatasetParserRuleCall_3_0());
				}
				lv_mml_3_0=ruleDataset
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMMLRule());
					}
					add(
						$current,
						"mml",
						lv_mml_3_0,
						"src.idm_mml.MyDsl.Dataset");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getMMLAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleImplementation
entryRuleImplementation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImplementationRule()); }
	iv_ruleImplementation=ruleImplementation
	{ $current=$iv_ruleImplementation.current; }
	EOF;

// Rule Implementation
ruleImplementation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getImplementationAccess().getImplementationAction_0_0(),
						$current);
				}
			)
			otherlv_1='Implementation'
			{
				newLeafNode(otherlv_1, grammarAccess.getImplementationAccess().getImplementationKeyword_0_1());
			}
			otherlv_2='Scikit-learn'
			{
				newLeafNode(otherlv_2, grammarAccess.getImplementationAccess().getScikitLearnKeyword_0_2());
			}
		)
		    |
		(
			otherlv_3='Weka'
			{
				newLeafNode(otherlv_3, grammarAccess.getImplementationAccess().getWekaKeyword_1_0());
			}
			otherlv_4='{'
			{
				newLeafNode(otherlv_4, grammarAccess.getImplementationAccess().getLeftCurlyBracketKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getImplementationAccess().getAlgoAlgorithmeParserRuleCall_1_2_0());
					}
					lv_algo_5_0=ruleAlgorithme
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getImplementationRule());
						}
						add(
							$current,
							"algo",
							lv_algo_5_0,
							"src.idm_mml.MyDsl.Algorithme");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getImplementationAccess().getMetriqueMetriqueParserRuleCall_1_3_0());
					}
					lv_metrique_6_0=ruleMetrique
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getImplementationRule());
						}
						add(
							$current,
							"metrique",
							lv_metrique_6_0,
							"src.idm_mml.MyDsl.Metrique");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getImplementationAccess().getStrategieStrategieParserRuleCall_1_4_0());
					}
					lv_strategie_7_0=ruleStrategie
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getImplementationRule());
						}
						add(
							$current,
							"strategie",
							lv_strategie_7_0,
							"src.idm_mml.MyDsl.Strategie");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_8='}'
			{
				newLeafNode(otherlv_8, grammarAccess.getImplementationAccess().getRightCurlyBracketKeyword_1_5());
			}
		)
	)
;

// Entry rule entryRuleDataset
entryRuleDataset returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDatasetRule()); }
	iv_ruleDataset=ruleDataset
	{ $current=$iv_ruleDataset.current; }
	EOF;

// Rule Dataset
ruleDataset returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Dataset'
		{
			newLeafNode(otherlv_0, grammarAccess.getDatasetAccess().getDatasetKeyword_0());
		}
		(
			(
				lv_path_1_0=RULE_STRING
				{
					newLeafNode(lv_path_1_0, grammarAccess.getDatasetAccess().getPathSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDatasetRule());
					}
					setWithLastConsumed(
						$current,
						"path",
						lv_path_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getDatasetAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDatasetAccess().getCibleCibleParserRuleCall_3_0());
				}
				lv_cible_3_0=ruleCible
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDatasetRule());
					}
					add(
						$current,
						"cible",
						lv_cible_3_0,
						"src.idm_mml.MyDsl.Cible");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDatasetAccess().getPredictivesPredictivesParserRuleCall_4_0());
				}
				lv_predictives_4_0=rulePredictives
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDatasetRule());
					}
					add(
						$current,
						"predictives",
						lv_predictives_4_0,
						"src.idm_mml.MyDsl.Predictives");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getDatasetAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleStrategie
entryRuleStrategie returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStrategieRule()); }
	iv_ruleStrategie=ruleStrategie
	{ $current=$iv_ruleStrategie.current; }
	EOF;

// Rule Strategie
ruleStrategie returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='Strategie'
			{
				newLeafNode(otherlv_0, grammarAccess.getStrategieAccess().getStrategieKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStrategieAccess().getStrategieValidationParserRuleCall_0_1_0());
					}
					lv_strategie_1_0=ruleValidation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStrategieRule());
						}
						add(
							$current,
							"strategie",
							lv_strategie_1_0,
							"src.idm_mml.MyDsl.Validation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getStrategieAccess().getCrossValidationParserRuleCall_1());
		}
		this_CrossValidation_2=ruleCrossValidation
		{
			$current = $this_CrossValidation_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleValidation
entryRuleValidation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValidationRule()); }
	iv_ruleValidation=ruleValidation
	{ $current=$iv_ruleValidation.current; }
	EOF;

// Rule Validation
ruleValidation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Validation'
		{
			newLeafNode(otherlv_0, grammarAccess.getValidationAccess().getValidationKeyword_0());
		}
		(
			(
				lv_pourcentage_1_0=RULE_INT
				{
					newLeafNode(lv_pourcentage_1_0, grammarAccess.getValidationAccess().getPourcentageINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getValidationRule());
					}
					setWithLastConsumed(
						$current,
						"pourcentage",
						lv_pourcentage_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleCrossValidation
entryRuleCrossValidation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCrossValidationRule()); }
	iv_ruleCrossValidation=ruleCrossValidation
	{ $current=$iv_ruleCrossValidation.current; }
	EOF;

// Rule CrossValidation
ruleCrossValidation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCrossValidationAccess().getCrossValidationAction_0(),
					$current);
			}
		)
		otherlv_1='CrossValidation'
		{
			newLeafNode(otherlv_1, grammarAccess.getCrossValidationAccess().getCrossValidationKeyword_1());
		}
		(
			(
				lv_k_2_0=RULE_INT
				{
					newLeafNode(lv_k_2_0, grammarAccess.getCrossValidationAccess().getKINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCrossValidationRule());
					}
					setWithLastConsumed(
						$current,
						"k",
						lv_k_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)?
	)
;

// Entry rule entryRuleCible
entryRuleCible returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCibleRule()); }
	iv_ruleCible=ruleCible
	{ $current=$iv_ruleCible.current; }
	EOF;

// Rule Cible
ruleCible returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Cible'
		{
			newLeafNode(otherlv_0, grammarAccess.getCibleAccess().getCibleKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getCibleAccess().getIdColonneParserRuleCall_1());
		}
		this_idColonne_1=ruleidColonne
		{
			$current = $this_idColonne_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePredictives
entryRulePredictives returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPredictivesRule()); }
	iv_rulePredictives=rulePredictives
	{ $current=$iv_rulePredictives.current; }
	EOF;

// Rule Predictives
rulePredictives returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Predictives'
		{
			newLeafNode(otherlv_0, grammarAccess.getPredictivesAccess().getPredictivesKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPredictivesAccess().getPredictivesIdColonneParserRuleCall_1_0());
				}
				lv_predictives_1_0=ruleidColonne
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPredictivesRule());
					}
					add(
						$current,
						"predictives",
						lv_predictives_1_0,
						"src.idm_mml.MyDsl.idColonne");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleidColonne
entryRuleidColonne returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIdColonneRule()); }
	iv_ruleidColonne=ruleidColonne
	{ $current=$iv_ruleidColonne.current; }
	EOF;

// Rule idColonne
ruleidColonne returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Colonne'
		{
			newLeafNode(otherlv_0, grammarAccess.getIdColonneAccess().getColonneKeyword_0());
		}
		(
			(
				lv_id_1_0=RULE_INT
				{
					newLeafNode(lv_id_1_0, grammarAccess.getIdColonneAccess().getIdINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIdColonneRule());
					}
					setWithLastConsumed(
						$current,
						"id",
						lv_id_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleAlgorithme
entryRuleAlgorithme returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAlgorithmeRule()); }
	iv_ruleAlgorithme=ruleAlgorithme
	{ $current=$iv_ruleAlgorithme.current; }
	EOF;

// Rule Algorithme
ruleAlgorithme returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Algorithme'
		{
			newLeafNode(otherlv_0, grammarAccess.getAlgorithmeAccess().getAlgorithmeKeyword_0());
		}
		(
			(
				lv_text_1_0=RULE_STRING
				{
					newLeafNode(lv_text_1_0, grammarAccess.getAlgorithmeAccess().getTextSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAlgorithmeRule());
					}
					setWithLastConsumed(
						$current,
						"text",
						lv_text_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleMetrique
entryRuleMetrique returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMetriqueRule()); }
	iv_ruleMetrique=ruleMetrique
	{ $current=$iv_ruleMetrique.current; }
	EOF;

// Rule Metrique
ruleMetrique returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Metrique'
		{
			newLeafNode(otherlv_0, grammarAccess.getMetriqueAccess().getMetriqueKeyword_0());
		}
		(
			(
				lv_text_1_0=RULE_STRING
				{
					newLeafNode(lv_text_1_0, grammarAccess.getMetriqueAccess().getTextSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMetriqueRule());
					}
					setWithLastConsumed(
						$current,
						"text",
						lv_text_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
