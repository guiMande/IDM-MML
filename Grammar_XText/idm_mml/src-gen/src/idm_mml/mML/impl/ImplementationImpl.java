/**
 * generated by Xtext 2.19.0
 */
package src.idm_mml.mML.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import src.idm_mml.mML.Algorithme;
import src.idm_mml.mML.Implementation;
import src.idm_mml.mML.MMLPackage;
import src.idm_mml.mML.Metrique;
import src.idm_mml.mML.Strategie;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Implementation</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link src.idm_mml.mML.impl.ImplementationImpl#getAlgo <em>Algo</em>}</li>
 *   <li>{@link src.idm_mml.mML.impl.ImplementationImpl#getMetrique <em>Metrique</em>}</li>
 *   <li>{@link src.idm_mml.mML.impl.ImplementationImpl#getStrategie <em>Strategie</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ImplementationImpl extends MinimalEObjectImpl.Container implements Implementation
{
  /**
   * The cached value of the '{@link #getAlgo() <em>Algo</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAlgo()
   * @generated
   * @ordered
   */
  protected EList<Algorithme> algo;

  /**
   * The cached value of the '{@link #getMetrique() <em>Metrique</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMetrique()
   * @generated
   * @ordered
   */
  protected EList<Metrique> metrique;

  /**
   * The cached value of the '{@link #getStrategie() <em>Strategie</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStrategie()
   * @generated
   * @ordered
   */
  protected EList<Strategie> strategie;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ImplementationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MMLPackage.Literals.IMPLEMENTATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Algorithme> getAlgo()
  {
    if (algo == null)
    {
      algo = new EObjectContainmentEList<Algorithme>(Algorithme.class, this, MMLPackage.IMPLEMENTATION__ALGO);
    }
    return algo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Metrique> getMetrique()
  {
    if (metrique == null)
    {
      metrique = new EObjectContainmentEList<Metrique>(Metrique.class, this, MMLPackage.IMPLEMENTATION__METRIQUE);
    }
    return metrique;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Strategie> getStrategie()
  {
    if (strategie == null)
    {
      strategie = new EObjectContainmentEList<Strategie>(Strategie.class, this, MMLPackage.IMPLEMENTATION__STRATEGIE);
    }
    return strategie;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MMLPackage.IMPLEMENTATION__ALGO:
        return ((InternalEList<?>)getAlgo()).basicRemove(otherEnd, msgs);
      case MMLPackage.IMPLEMENTATION__METRIQUE:
        return ((InternalEList<?>)getMetrique()).basicRemove(otherEnd, msgs);
      case MMLPackage.IMPLEMENTATION__STRATEGIE:
        return ((InternalEList<?>)getStrategie()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MMLPackage.IMPLEMENTATION__ALGO:
        return getAlgo();
      case MMLPackage.IMPLEMENTATION__METRIQUE:
        return getMetrique();
      case MMLPackage.IMPLEMENTATION__STRATEGIE:
        return getStrategie();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MMLPackage.IMPLEMENTATION__ALGO:
        getAlgo().clear();
        getAlgo().addAll((Collection<? extends Algorithme>)newValue);
        return;
      case MMLPackage.IMPLEMENTATION__METRIQUE:
        getMetrique().clear();
        getMetrique().addAll((Collection<? extends Metrique>)newValue);
        return;
      case MMLPackage.IMPLEMENTATION__STRATEGIE:
        getStrategie().clear();
        getStrategie().addAll((Collection<? extends Strategie>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MMLPackage.IMPLEMENTATION__ALGO:
        getAlgo().clear();
        return;
      case MMLPackage.IMPLEMENTATION__METRIQUE:
        getMetrique().clear();
        return;
      case MMLPackage.IMPLEMENTATION__STRATEGIE:
        getStrategie().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MMLPackage.IMPLEMENTATION__ALGO:
        return algo != null && !algo.isEmpty();
      case MMLPackage.IMPLEMENTATION__METRIQUE:
        return metrique != null && !metrique.isEmpty();
      case MMLPackage.IMPLEMENTATION__STRATEGIE:
        return strategie != null && !strategie.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ImplementationImpl
