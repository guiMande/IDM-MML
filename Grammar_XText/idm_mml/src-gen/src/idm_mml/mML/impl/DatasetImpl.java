/**
 * generated by Xtext 2.19.0
 */
package src.idm_mml.mML.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import src.idm_mml.mML.Cible;
import src.idm_mml.mML.Dataset;
import src.idm_mml.mML.MMLPackage;
import src.idm_mml.mML.Predictives;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Dataset</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link src.idm_mml.mML.impl.DatasetImpl#getPath <em>Path</em>}</li>
 *   <li>{@link src.idm_mml.mML.impl.DatasetImpl#getCible <em>Cible</em>}</li>
 *   <li>{@link src.idm_mml.mML.impl.DatasetImpl#getPredictives <em>Predictives</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DatasetImpl extends MinimalEObjectImpl.Container implements Dataset
{
  /**
   * The default value of the '{@link #getPath() <em>Path</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPath()
   * @generated
   * @ordered
   */
  protected static final String PATH_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPath() <em>Path</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPath()
   * @generated
   * @ordered
   */
  protected String path = PATH_EDEFAULT;

  /**
   * The cached value of the '{@link #getCible() <em>Cible</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCible()
   * @generated
   * @ordered
   */
  protected EList<Cible> cible;

  /**
   * The cached value of the '{@link #getPredictives() <em>Predictives</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPredictives()
   * @generated
   * @ordered
   */
  protected EList<Predictives> predictives;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DatasetImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MMLPackage.Literals.DATASET;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getPath()
  {
    return path;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPath(String newPath)
  {
    String oldPath = path;
    path = newPath;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MMLPackage.DATASET__PATH, oldPath, path));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Cible> getCible()
  {
    if (cible == null)
    {
      cible = new EObjectContainmentEList<Cible>(Cible.class, this, MMLPackage.DATASET__CIBLE);
    }
    return cible;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Predictives> getPredictives()
  {
    if (predictives == null)
    {
      predictives = new EObjectContainmentEList<Predictives>(Predictives.class, this, MMLPackage.DATASET__PREDICTIVES);
    }
    return predictives;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MMLPackage.DATASET__CIBLE:
        return ((InternalEList<?>)getCible()).basicRemove(otherEnd, msgs);
      case MMLPackage.DATASET__PREDICTIVES:
        return ((InternalEList<?>)getPredictives()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MMLPackage.DATASET__PATH:
        return getPath();
      case MMLPackage.DATASET__CIBLE:
        return getCible();
      case MMLPackage.DATASET__PREDICTIVES:
        return getPredictives();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MMLPackage.DATASET__PATH:
        setPath((String)newValue);
        return;
      case MMLPackage.DATASET__CIBLE:
        getCible().clear();
        getCible().addAll((Collection<? extends Cible>)newValue);
        return;
      case MMLPackage.DATASET__PREDICTIVES:
        getPredictives().clear();
        getPredictives().addAll((Collection<? extends Predictives>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MMLPackage.DATASET__PATH:
        setPath(PATH_EDEFAULT);
        return;
      case MMLPackage.DATASET__CIBLE:
        getCible().clear();
        return;
      case MMLPackage.DATASET__PREDICTIVES:
        getPredictives().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MMLPackage.DATASET__PATH:
        return PATH_EDEFAULT == null ? path != null : !PATH_EDEFAULT.equals(path);
      case MMLPackage.DATASET__CIBLE:
        return cible != null && !cible.isEmpty();
      case MMLPackage.DATASET__PREDICTIVES:
        return predictives != null && !predictives.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (path: ");
    result.append(path);
    result.append(')');
    return result.toString();
  }

} //DatasetImpl
