/**
 * generated by Xtext 2.19.0
 */
package src.idm_mml.mML.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import src.idm_mml.mML.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see src.idm_mml.mML.MMLPackage
 * @generated
 */
public class MMLAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MMLPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MMLAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = MMLPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MMLSwitch<Adapter> modelSwitch =
    new MMLSwitch<Adapter>()
    {
      @Override
      public Adapter caseMML(MML object)
      {
        return createMMLAdapter();
      }
      @Override
      public Adapter caseImplementation(Implementation object)
      {
        return createImplementationAdapter();
      }
      @Override
      public Adapter caseDataset(Dataset object)
      {
        return createDatasetAdapter();
      }
      @Override
      public Adapter caseStrategie(Strategie object)
      {
        return createStrategieAdapter();
      }
      @Override
      public Adapter caseValidation(Validation object)
      {
        return createValidationAdapter();
      }
      @Override
      public Adapter caseCrossValidation(CrossValidation object)
      {
        return createCrossValidationAdapter();
      }
      @Override
      public Adapter caseCible(Cible object)
      {
        return createCibleAdapter();
      }
      @Override
      public Adapter casePredictives(Predictives object)
      {
        return createPredictivesAdapter();
      }
      @Override
      public Adapter caseidColonne(idColonne object)
      {
        return createidColonneAdapter();
      }
      @Override
      public Adapter caseAlgorithme(Algorithme object)
      {
        return createAlgorithmeAdapter();
      }
      @Override
      public Adapter caseMetrique(Metrique object)
      {
        return createMetriqueAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link src.idm_mml.mML.MML <em>MML</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see src.idm_mml.mML.MML
   * @generated
   */
  public Adapter createMMLAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link src.idm_mml.mML.Implementation <em>Implementation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see src.idm_mml.mML.Implementation
   * @generated
   */
  public Adapter createImplementationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link src.idm_mml.mML.Dataset <em>Dataset</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see src.idm_mml.mML.Dataset
   * @generated
   */
  public Adapter createDatasetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link src.idm_mml.mML.Strategie <em>Strategie</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see src.idm_mml.mML.Strategie
   * @generated
   */
  public Adapter createStrategieAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link src.idm_mml.mML.Validation <em>Validation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see src.idm_mml.mML.Validation
   * @generated
   */
  public Adapter createValidationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link src.idm_mml.mML.CrossValidation <em>Cross Validation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see src.idm_mml.mML.CrossValidation
   * @generated
   */
  public Adapter createCrossValidationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link src.idm_mml.mML.Cible <em>Cible</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see src.idm_mml.mML.Cible
   * @generated
   */
  public Adapter createCibleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link src.idm_mml.mML.Predictives <em>Predictives</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see src.idm_mml.mML.Predictives
   * @generated
   */
  public Adapter createPredictivesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link src.idm_mml.mML.idColonne <em>id Colonne</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see src.idm_mml.mML.idColonne
   * @generated
   */
  public Adapter createidColonneAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link src.idm_mml.mML.Algorithme <em>Algorithme</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see src.idm_mml.mML.Algorithme
   * @generated
   */
  public Adapter createAlgorithmeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link src.idm_mml.mML.Metrique <em>Metrique</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see src.idm_mml.mML.Metrique
   * @generated
   */
  public Adapter createMetriqueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //MMLAdapterFactory
