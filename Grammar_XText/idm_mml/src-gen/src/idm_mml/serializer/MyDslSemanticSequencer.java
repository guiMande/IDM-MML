/*
 * generated by Xtext 2.19.0
 */
package src.idm_mml.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import src.idm_mml.mML.Algorithme;
import src.idm_mml.mML.CrossValidation;
import src.idm_mml.mML.Dataset;
import src.idm_mml.mML.Implementation;
import src.idm_mml.mML.MML;
import src.idm_mml.mML.MMLPackage;
import src.idm_mml.mML.Metrique;
import src.idm_mml.mML.Predictives;
import src.idm_mml.mML.Strategie;
import src.idm_mml.mML.Validation;
import src.idm_mml.mML.idColonne;
import src.idm_mml.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MMLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MMLPackage.ALGORITHME:
				sequence_Algorithme(context, (Algorithme) semanticObject); 
				return; 
			case MMLPackage.CROSS_VALIDATION:
				sequence_CrossValidation(context, (CrossValidation) semanticObject); 
				return; 
			case MMLPackage.DATASET:
				sequence_Dataset(context, (Dataset) semanticObject); 
				return; 
			case MMLPackage.IMPLEMENTATION:
				sequence_Implementation(context, (Implementation) semanticObject); 
				return; 
			case MMLPackage.MML:
				sequence_MML(context, (MML) semanticObject); 
				return; 
			case MMLPackage.METRIQUE:
				sequence_Metrique(context, (Metrique) semanticObject); 
				return; 
			case MMLPackage.PREDICTIVES:
				sequence_Predictives(context, (Predictives) semanticObject); 
				return; 
			case MMLPackage.STRATEGIE:
				sequence_Strategie(context, (Strategie) semanticObject); 
				return; 
			case MMLPackage.VALIDATION:
				sequence_Validation(context, (Validation) semanticObject); 
				return; 
			case MMLPackage.ID_COLONNE:
				sequence_idColonne(context, (idColonne) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Algorithme returns Algorithme
	 *
	 * Constraint:
	 *     text=STRING
	 */
	protected void sequence_Algorithme(ISerializationContext context, Algorithme semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MMLPackage.Literals.ALGORITHME__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MMLPackage.Literals.ALGORITHME__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAlgorithmeAccess().getTextSTRINGTerminalRuleCall_1_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Strategie returns CrossValidation
	 *     CrossValidation returns CrossValidation
	 *
	 * Constraint:
	 *     k=INT?
	 */
	protected void sequence_CrossValidation(ISerializationContext context, CrossValidation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Dataset returns Dataset
	 *
	 * Constraint:
	 *     (path=STRING cible+=Cible predictives+=Predictives)
	 */
	protected void sequence_Dataset(ISerializationContext context, Dataset semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Implementation returns Implementation
	 *
	 * Constraint:
	 *     (algo+=Algorithme metrique+=Metrique strategie+=Strategie)?
	 */
	protected void sequence_Implementation(ISerializationContext context, Implementation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MML returns MML
	 *
	 * Constraint:
	 *     (mml+=Implementation+ mml+=Dataset+)
	 */
	protected void sequence_MML(ISerializationContext context, MML semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Metrique returns Metrique
	 *
	 * Constraint:
	 *     text=STRING
	 */
	protected void sequence_Metrique(ISerializationContext context, Metrique semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MMLPackage.Literals.METRIQUE__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MMLPackage.Literals.METRIQUE__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMetriqueAccess().getTextSTRINGTerminalRuleCall_1_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Predictives returns Predictives
	 *
	 * Constraint:
	 *     predictives+=idColonne+
	 */
	protected void sequence_Predictives(ISerializationContext context, Predictives semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Strategie returns Strategie
	 *
	 * Constraint:
	 *     strategie+=Validation
	 */
	protected void sequence_Strategie(ISerializationContext context, Strategie semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Validation returns Validation
	 *
	 * Constraint:
	 *     pourcentage=INT
	 */
	protected void sequence_Validation(ISerializationContext context, Validation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MMLPackage.Literals.VALIDATION__POURCENTAGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MMLPackage.Literals.VALIDATION__POURCENTAGE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getValidationAccess().getPourcentageINTTerminalRuleCall_1_0(), semanticObject.getPourcentage());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Cible returns idColonne
	 *     idColonne returns idColonne
	 *
	 * Constraint:
	 *     id=INT
	 */
	protected void sequence_idColonne(ISerializationContext context, idColonne semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MMLPackage.Literals.ID_COLONNE__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MMLPackage.Literals.ID_COLONNE__ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIdColonneAccess().getIdINTTerminalRuleCall_1_0(), semanticObject.getId());
		feeder.finish();
	}
	
	
}
