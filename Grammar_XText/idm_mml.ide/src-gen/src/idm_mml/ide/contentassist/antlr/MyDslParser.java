/*
 * generated by Xtext 2.19.0
 */
package src.idm_mml.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import src.idm_mml.ide.contentassist.antlr.internal.InternalMyDslParser;
import src.idm_mml.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getImplementationAccess().getAlternatives(), "rule__Implementation__Alternatives");
			builder.put(grammarAccess.getStrategieAccess().getAlternatives(), "rule__Strategie__Alternatives");
			builder.put(grammarAccess.getMMLAccess().getGroup(), "rule__MML__Group__0");
			builder.put(grammarAccess.getImplementationAccess().getGroup_0(), "rule__Implementation__Group_0__0");
			builder.put(grammarAccess.getImplementationAccess().getGroup_1(), "rule__Implementation__Group_1__0");
			builder.put(grammarAccess.getDatasetAccess().getGroup(), "rule__Dataset__Group__0");
			builder.put(grammarAccess.getStrategieAccess().getGroup_0(), "rule__Strategie__Group_0__0");
			builder.put(grammarAccess.getValidationAccess().getGroup(), "rule__Validation__Group__0");
			builder.put(grammarAccess.getCrossValidationAccess().getGroup(), "rule__CrossValidation__Group__0");
			builder.put(grammarAccess.getCibleAccess().getGroup(), "rule__Cible__Group__0");
			builder.put(grammarAccess.getPredictivesAccess().getGroup(), "rule__Predictives__Group__0");
			builder.put(grammarAccess.getIdColonneAccess().getGroup(), "rule__IdColonne__Group__0");
			builder.put(grammarAccess.getAlgorithmeAccess().getGroup(), "rule__Algorithme__Group__0");
			builder.put(grammarAccess.getMetriqueAccess().getGroup(), "rule__Metrique__Group__0");
			builder.put(grammarAccess.getMMLAccess().getMmlAssignment_2(), "rule__MML__MmlAssignment_2");
			builder.put(grammarAccess.getMMLAccess().getMmlAssignment_3(), "rule__MML__MmlAssignment_3");
			builder.put(grammarAccess.getImplementationAccess().getAlgoAssignment_1_2(), "rule__Implementation__AlgoAssignment_1_2");
			builder.put(grammarAccess.getImplementationAccess().getMetriqueAssignment_1_3(), "rule__Implementation__MetriqueAssignment_1_3");
			builder.put(grammarAccess.getImplementationAccess().getStrategieAssignment_1_4(), "rule__Implementation__StrategieAssignment_1_4");
			builder.put(grammarAccess.getDatasetAccess().getPathAssignment_1(), "rule__Dataset__PathAssignment_1");
			builder.put(grammarAccess.getDatasetAccess().getCibleAssignment_3(), "rule__Dataset__CibleAssignment_3");
			builder.put(grammarAccess.getDatasetAccess().getPredictivesAssignment_4(), "rule__Dataset__PredictivesAssignment_4");
			builder.put(grammarAccess.getStrategieAccess().getStrategieAssignment_0_1(), "rule__Strategie__StrategieAssignment_0_1");
			builder.put(grammarAccess.getValidationAccess().getPourcentageAssignment_1(), "rule__Validation__PourcentageAssignment_1");
			builder.put(grammarAccess.getCrossValidationAccess().getKAssignment_2(), "rule__CrossValidation__KAssignment_2");
			builder.put(grammarAccess.getPredictivesAccess().getPredictivesAssignment_1(), "rule__Predictives__PredictivesAssignment_1");
			builder.put(grammarAccess.getIdColonneAccess().getIdAssignment_1(), "rule__IdColonne__IdAssignment_1");
			builder.put(grammarAccess.getAlgorithmeAccess().getTextAssignment_1(), "rule__Algorithme__TextAssignment_1");
			builder.put(grammarAccess.getMetriqueAccess().getTextAssignment_1(), "rule__Metrique__TextAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyDslGrammarAccess grammarAccess;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
